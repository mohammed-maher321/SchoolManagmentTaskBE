using Microsoft.EntityFrameworkCore;
using SchoolManagmentSystem.API.Services;
using SchoolManagmentSystem.Application;
using SchoolManagmentSystem.Contract.IServices;
using SchoolManagmentSystem.Persistence;
using System.Reflection;

namespace SchoolManagmentSystem.API.Extension;

public static class ServiceExtension
{
    public static void ConfigureCors(this IServiceCollection services, IConfiguration configuration)
    {
        services.AddCors(options =>
        {
            options.AddPolicy("CorsPolicy", builder => builder.WithOrigins(configuration.GetValue<string>("AllowOrigins"))
            .AllowAnyHeader()
            .AllowAnyMethod()
            .AllowCredentials()
            .SetIsOriginAllowed((host) => true));
        });
    }

    public static void InitializeApplication(this IServiceCollection services, IConfiguration configuration)
    {

        services.AddApplication();
        services.AddInfrastructure(configuration);
        services.AddScoped<ICurrentLanguageService, CurrentLanguageService>();

    }

    public static void AddSwaggerConfig(this IServiceCollection services)
    {
        services.AddSwaggerGen(swagger =>
        {
            swagger.CustomSchemaIds(t => t.FullName);

            //Locate the XML file being generated by ASP.NET...
            string xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
            string xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

            //... and tell Swagger to use those XML comments.
            swagger.IncludeXmlComments(xmlPath);
        });
    }
    public static void UseCustomSwaggerConfig(this IApplicationBuilder app)
    {
        // Enable middleware to serve generated Swagger as a JSON endpoint.
        app.UseSwagger();

        // Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.),
        // specifying the Swagger JSON endpoint.
        app.UseSwaggerUI();
    }

    public static void UpdateDatabase(this IServiceCollection services, IApplicationBuilder app)
    {
        using (var serviceScope = app.ApplicationServices
            .GetRequiredService<IServiceScopeFactory>()
            .CreateScope())
        {
            using (var context = serviceScope.ServiceProvider.GetService<SchoolDbContext>())
            {
                context.Database.Migrate();
            }
        }
    }

}
